import { ChunkExtractor } from "@loadable/server";
import { NextFunction, Request, Response } from "express";
import path from "path";

import React from "react";
import ReactDOMServer from "react-async-ssr";

import { Provider, useStaticRendering } from "mobx-react";
import { syncHistoryWithStore } from "mobx-react-router";
import { Router, Route } from "react-router";
import { createMemoryHistory } from "history";

import App from "../../client/components/App";

import { Store } from "../../client/stores";

useStaticRendering(true);

export default async (req: Request, res: Response, next: NextFunction) => {
    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve(__dirname, "../../..", "client", "loadable-stats.json");
    const statsFileBackup = path.resolve(__dirname, "../../..", "dist/client", "loadable-stats.json");

    // We create an extractor from the statsFile
    let extractor: any;
    try {
        extractor = new ChunkExtractor({ statsFile });
    } catch {
        extractor = new ChunkExtractor({ statsFile: statsFileBackup });
    }

    const browserHistory = createMemoryHistory({
        initialEntries: [req.url],
    });

    const store = new Store();
    const history = syncHistoryWithStore(browserHistory, store.router);

    // Wrap your application using "collectChunks"
    const jsx = extractor.collectChunks(
        <Provider store={store} {...store}>
            <Router history={history}>
                <Route component={App} />
            </Router>
        </Provider>,
    );

    // Get the rendered version of the app, with proper data
    const html = await ReactDOMServer.renderToStringAsync(jsx);

    // You can now collect your script tags
    const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();

    // You can also collect your "preload/prefetch" links
    const linkTags = extractor.getLinkTags(); // or extractor.getLinkElements();

    // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleTags = extractor.getStyleTags(); // or extractor.getStyleElements();

    return res.send(
        `<html>
            <head>
                ${linkTags}
                ${styleTags}
            </head>
            <body>
                <div id="app">${html}</div>
                ${scriptTags}
            </body>
        </html>`,
    );
};
